]633;E;for file in $(find . -type f -name "*.py" -o -name "*.html");b85f9676-6a9e-46cd-9da7-5f2effd49412]633;C=== ./.vscode/arctictern.py ===
"""
arctictern.py
A little script that does a big migration
"""

import json
import os
import requests
import shutil
import subprocess
import sys
from os.path import exists

COLOURS = {"red": "\033[31m",
           "blue": "\033[34m",
           "green": "\033[32m",
           "reset": "\033[0m",
           "bold": "\033[1m"}

BASE_URL = "https://raw.githubusercontent.com/Code-Institute-Org/gitpod-full-template/main/"
CURRENT_VERSION = 1.0
THIS_VERSION = 1.0


UPGRADE_FILE_LIST = [{"filename": ".vscode/settings.json",
                      "url": ".vscode/settings.json"
                      },
                     {"filename": ".vscode/launch.json",
                      "url": ".vscode/launch.json"
                      },
                     {"filename": ".gitpod.yml",
                      "url": ".gitpod.yml"
                      },
                     {"filename": ".gitpod.dockerfile",
                      "url": ".gitpod.dockerfile"
                      },
                     {"filename": ".vscode/heroku_config.sh",
                      "url": ".vscode/heroku_config.sh"
                      },
                     {"filename": ".vscode/init_tasks.sh",
                      "url": ".vscode/init_tasks.sh"
                      },
                     {"filename": ".vscode/uptime.sh",
                      "url": ".vscode/uptime.sh"
                      },
                     {"filename": ".vscode/make_url.py",
                      "url": ".vscode/make_url.py"
                     },
                     {"filename": ".vscode/arctictern.py",
                      "url": ".vscode/arctictern.py"
                     }]

FINAL_LINES = "\nexport POST_UPGRADE_RUN=1\nsource ~/.bashrc\n"


def get_versions():

    if exists(".vscode/version.txt"):
        with open(".vscode/version.txt", "r") as f:
            THIS_VERSION = float(f.read().strip())
    else:
        with open(".vscode/version.txt", "w") as f:
            f.write(str(THIS_VERSION))
    
    r = requests.get(BASE_URL + ".vscode/version.txt")
    CURRENT_VERSION = float(r.content)

    return {"this_version": THIS_VERSION,
            "current_version": CURRENT_VERSION}

def needs_upgrade():
    """
    Checks the version of the current template against
    this version.
    Returns True if upgrade is needed, False if not.
    """

    versions = get_versions()
    
    print(f"Upstream version: {versions['current_version']}")
    print(f"Local version: {versions['this_version']}")

    return versions["current_version"] > versions["this_version"]


def write_version():

    versions = get_versions()

    with open(".vscode/version.txt", "w") as f:
        f.write(str(versions["current_version"]))


def build_post_upgrade():

    r = requests.get(BASE_URL + ".vscode/upgrades.json")
    upgrades = json.loads(r.content.decode("utf-8"))
    content = ""

    for k,v in upgrades.items():
        if float(k) > THIS_VERSION:
            print(f"Adding version changes for {k} to post_upgrade.sh")
            content += v

    if content:
        content += FINAL_LINES
        with open(".vscode/post_upgrade.sh", "w") as f:
            f.writelines(content)
    
    print("Built post_upgrade.sh. Restart your workspace for it to take effect.")


def process(file, suffix):
    """
    Replaces and optionally backs up the files that
    need to be changed.
    Arguments: file - a path and filename
               suffix - the suffix to the BASE_URL
    """

    if file == ".gitpod.dockerfile" or file == ".gitpod.yml":
        try:
            shutil.copyfile(file, f"{file}.tmp")
        except FileNotFoundError:
            pass

    with open(file, "wb") as f:
        r = requests.get(BASE_URL + suffix)
        f.write(r.content)

    if exists(f"{file}.tmp"):
        result = os.system(f"diff -q {file} {file}.tmp > /dev/null")
        if result != 0:
            os.remove(f"{file}.tmp")
            return True
    
    return False


def start_migration():
    """
    Calls the process function and
    renames the directory
    """
    push_and_recreate = False

    if not os.path.isdir(".vscode"):
        print("Creating .vscode directory")
        os.mkdir(".vscode")

    for file in UPGRADE_FILE_LIST:
        print(f"Processing: {file['filename']}")
        result = process(file["filename"], file["url"])
        if result == True:
            push_and_recreate = True
    
    if push_and_recreate:
        write_version()

    if needs_upgrade() and not push_and_recreate:
        build_post_upgrade()

    print("Changes saved.")
    print("Please add, commit and push to GitHub.")
    print("You may need to stop and restart your workspace for")
    print("the changes to take effect.\n")

    if push_and_recreate:
        print(f"{COLOURS['red']}{COLOURS['bold']}*** IMPORTANT INFORMATION ***{COLOURS['reset']}")
        print("The files used to create this workspace have been updated")
        print("Please download any files that are in .gitignore and")
        print("recreate this workspace by clicking on the Gitpod button")
        print("in GitHub. Then, upload your saved files again.\n")


if __name__ == "__main__":

    print(f"\nüê¶ {COLOURS['blue']}{COLOURS['bold']}ArcticTern version 0.3{COLOURS['reset']}")
    print("CI Template Migration Utility")
    print("-----------------------------")
    print("Upgrades the workspace to the latest version.\n")

    if input("Start? Y/N ").lower() == "y":
        start_migration()
    else:
        sys.exit("Migration cancelled by the user")



=== ./.vscode/make_url.py ===
# Simple utility for creating the Cloudinary URL from a
# cloudinary_python.txt file
# Matt Rudge, November 2021

import re

with open("cloudinary_python.txt") as f:
    content = f.readlines()

cloud_name = re.findall(r"['](.*?)[']",content[15])[0]
api_key = re.findall(r"['](.*?)[']",content[16])[0]
api_secret = re.findall(r"['](.*?)[']",content[17])[0]

print(f"cloudinary://{api_key}:{api_secret}@{cloud_name}")



=== ./checkout/urls.py ===
from django.urls import path
from . import views
from . import webhooks

urlpatterns = [
    path('wh/', webhooks.webhook, name='webhook'),
]


=== ./checkout/webhook_handler.py ===
from django.http import HttpResponse
from orders.models import Order
import stripe
import json
import time

class StripeWH_Handler:
    """Handle Stripe webhooks"""

    def __init__(self, request):
        self.request = request

    def handle_event(self, event):
        """Handle a generic/unknown/unexpected webhook event"""
        return HttpResponse(
            content=f'Unhandled webhook received: {event["type"]}',
            status=200)

    def handle_payment_intent_succeeded(self, event):
        """Handle the payment_intent.succeeded webhook"""
        intent = event.data.object
        pid = intent.id
        stripe_charge = stripe.Charge.retrieve(intent.latest_charge)
        billing_details = stripe_charge.billing_details
        grand_total = round(stripe_charge.amount / 100, 2)

        # Update order
        order_exists = False
        attempt = 1
        while attempt <= 5:
            try:
                order = Order.objects.get(stripe_pid=pid)
                order.is_paid = True
                order.save()
                order_exists = True
                break
            except Order.DoesNotExist:
                attempt += 1
                time.sleep(1)

        if order_exists:
            return HttpResponse(
                content=f'Webhook received: {event["type"]} | SUCCESS: Order already in database',
                status=200)
        else:
            return HttpResponse(
                content=f'Webhook received: {event["type"]} | ERROR: Order not found',
                status=500)

    def handle_payment_intent_payment_failed(self, event):
        """Handle the payment_intent.payment_failed webhook"""
        return HttpResponse(
            content=f'Webhook received: {event["type"]} | Payment Failed',
            status=200)


=== ./checkout/webhooks.py ===
import stripe
from django.conf import settings
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
from .webhook_handler import StripeWH_Handler

@require_POST
@csrf_exempt
def webhook(request):
    """Listen for webhooks from Stripe"""
    wh_secret = settings.STRIPE_WH_SECRET
    stripe.api_key = settings.STRIPE_SECRET_KEY

    # Get the webhook data and verify signature
    payload = request.body
    sig_header = request.META['HTTP_STRIPE_SIGNATURE']
    event = None

    try:
        event = stripe.Webhook.construct_event(
            payload, sig_header, wh_secret
        )
    except ValueError as e:
        return HttpResponse(status=400)
    except stripe.error.SignatureVerificationError as e:
        return HttpResponse(status=400)

    # Set up webhook handler
    handler = StripeWH_Handler(request)

    # Map webhook events to relevant handler functions
    event_map = {
        'payment_intent.succeeded': handler.handle_payment_intent_succeeded,
        'payment_intent.payment_failed': handler.handle_payment_intent_payment_failed,
    }

    # Get the webhook type from Stripe
    event_type = event['type']

    # If there's a handler for it, get it from the event map
    event_handler = event_map.get(event_type, handler.handle_event)

    # Call the event handler with the event
    response = event_handler(event)
    return response


=== ./manage.py ===
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pixel_and_paper.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()



=== ./marketing/__init__.py ===



=== ./marketing/admin.py ===
from django.contrib import admin

# Register your models here.



=== ./marketing/apps.py ===
from django.apps import AppConfig


class MarketingConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'marketing'



=== ./marketing/migrations/__init__.py ===



=== ./marketing/models.py ===
from django.db import models

class NewsletterSubscriber(models.Model):
    email = models.EmailField(unique=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.email


=== ./marketing/tests.py ===
from django.test import TestCase

# Create your tests here.



=== ./marketing/views.py ===
from django.core.mail import send_mail
from django.http import HttpResponse
from django.conf import settings

def test_email(request):
    try:
        send_mail(
            'Test Email',
            'This is a test email from your Django app.',
            settings.EMAIL_HOST_USER,
            [settings.EMAIL_HOST_USER],
            fail_silently=False,
        )
        return HttpResponse('Test email sent!')
    except Exception as e:
        import traceback
        return HttpResponse(f'Error: {e.__class__.__name__} - {str(e)}\n{traceback.format_exc()}')


=== ./marketing/urls.py ===
from django.urls import path
from . import views

urlpatterns = [
    path('test-email/', views.test_email, name='test_email'),
]


=== ./orders/__init__.py ===



=== ./orders/admin.py ===
from django.contrib import admin
from .models import Order

admin.site.register(Order)  


=== ./orders/apps.py ===
from django.apps import AppConfig


class OrdersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'orders'



=== ./orders/migrations/0001_initial.py ===
# Generated by Django 5.1.2 on 2024-10-26 18:44

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_ordered', models.DateTimeField(auto_now_add=True)),
                ('paid', models.BooleanField(default=False)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]



=== ./orders/migrations/0002_rename_paid_order_is_paid_and_more.py ===
# Generated by Django 5.1.2 on 2024-10-27 13:21

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('orders', '0001_initial'),
    ]

    operations = [
        migrations.RenameField(
            model_name='order',
            old_name='paid',
            new_name='is_paid',
        ),
        migrations.RenameField(
            model_name='order',
            old_name='date_ordered',
            new_name='order_date',
        ),
    ]



=== ./orders/migrations/__init__.py ===



=== ./orders/models.py ===
from django.db import models
from django.contrib.auth.models import User
from products.models import Product

class Order(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    order_date = models.DateTimeField(auto_now_add=True)
    is_paid = models.BooleanField(default=False)

    def __str__(self):
        return f"Order {self.id} - {self.user.username}"



=== ./orders/tests.py ===
from django.test import TestCase

# Create your tests here.



=== ./orders/views.py ===
from django.shortcuts import render

# Create your views here.



=== ./pixel_and_paper/__init__.py ===



=== ./pixel_and_paper/asgi.py ===
"""
ASGI config for pixel_and_paper project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pixel_and_paper.settings')

application = get_asgi_application()



=== ./pixel_and_paper/settings.py ===
import os
from dotenv import load_dotenv
load_dotenv()

"""
Django settings for pixel_and_paper project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-!tmi(owsqedp=dkiza2&#v9)a@msi@mf$=#kwwzr!n)-qk43^c'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    '8000-florajenner-pixelandpap-8wfrrv9vbf2.ws.codeinstitute-ide.net',
    '8000-florajenner-pixelandpap-mufp4w0f195.ws-eu116.gitpod.io',
    'florajenner-pixelandpap-mufp4w0f195.ws-eu116.gitpod.io'
]

CSRF_TRUSTED_ORIGINS = [
    'https://8000-florajenner-pixelandpap-8wfrrv9vbf2.ws.codeinstitute-ide.net',
    'https://8000-florajenner-pixelandpap-mufp4w0f195.ws-eu116.gitpod.io'
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'crispy_forms',

    # Custom apps 
    'products',
    'profiles',
    'orders',

    'django.contrib.sitemaps',
    'django.contrib.sites',
    'marketing',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'pixel_and_paper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # Add this line
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pixel_and_paper.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-gb'
TIME_ZONE = 'Europe/London'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / 'pixel_and_paper/static']

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = '35fzoasx@students.codeinstitute.net'
EMAIL_HOST_PASSWORD = 'sfno msdv qgnh gfrc'


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CRISPY_TEMPLATE_PACK = 'bootstrap4'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

STRIPE_PUBLIC_KEY = os.environ.get('STRIPE_PUBLIC_KEY', '')
STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY', '')
STRIPE_CURRENCY = 'usd'  # or 'gbp' if using British pounds
STRIPE_WH_SECRET = os.environ.get('STRIPE_WH_SECRET', '')
SITE_ID = 1





=== ./pixel_and_paper/urls.py ===
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static
from products import views as product_views
from marketing import views as marketing_views

urlpatterns = [
    path('', product_views.home, name='home'),
    path('products/', include('products.urls')),
    path('marketing/', include('marketing.urls')),
    path('admin/', admin.site.urls),
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


=== ./pixel_and_paper/wsgi.py ===
"""
WSGI config for pixel_and_paper project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pixel_and_paper.settings')

application = get_wsgi_application()



=== ./products/__init__.py ===



=== ./products/admin.py ===
from django.contrib import admin
from .models import Product  

admin.site.register(Product) 


=== ./products/apps.py ===
from django.apps import AppConfig


class ProductsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'products'



=== ./products/migrations/0001_initial.py ===
# Generated by Django 5.1.2 on 2024-10-26 18:44

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=6)),
                ('file', models.FileField(upload_to='downloads/')),
                ('slug', models.SlugField(unique=True)),
            ],
        ),
    ]



=== ./products/migrations/0002_product_category_product_image_alter_product_file.py ===
# Generated by Django 5.1.2 on 2024-10-27 19:15

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.CharField(default='Uncategorized', max_length=100),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='product',
            name='image',
            field=models.ImageField(blank=True, null=True, upload_to='product_images/'),
        ),
        migrations.AlterField(
            model_name='product',
            name='file',
            field=models.FileField(upload_to='product_images'),
        ),
    ]



=== ./products/migrations/__init__.py ===



=== ./products/models.py ===
from django.db import models

class Product(models.Model):
    title = models.CharField(max_length=255)
    description = models.TextField()
    price = models.DecimalField(max_digits=6, decimal_places=2)
    file = models.FileField(upload_to='product_images')
    slug = models.SlugField(unique=True)
    category = models.CharField(max_length=100)
    image = models.ImageField(upload_to='product_images/', blank=True, null=True)

    def __str__(self):
        return self.title






=== ./products/tests.py ===
# products/tests.py
from django.test import TestCase, Client
from django.urls import reverse
from django.contrib.auth.models import User
from .models import Product
from django.core.files.uploadedfile import SimpleUploadedFile

class PixelAndPaperTests(TestCase):
    def setUp(self):
        """Set up test data for all test methods"""
        self.client = Client()
        
        # Create test user
        self.user = User.objects.create_user(
            username='testuser',
            password='testpass123',
            email='test@example.com'
        )
        
        # Create a test file
        self.test_file = SimpleUploadedFile(
            name='test_file.pdf',
            content=b'file_content',
            content_type='application/pdf'
        )
        
        # Create test product with correct fields
        self.product = Product.objects.create(
            title='Test Product',
            description='Test Description',
            price=99.99,
            file=self.test_file,
            slug='test-product',
            category='test-category',
            image='product_images/test-image.jpg'
        )

    def test_home_page(self):
        """Test home page loads correctly"""
        response = self.client.get('/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'products/home.html')

    def test_product_list(self):
        """Test product list page loads correctly"""
        response = self.client.get('/products/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'products/product_list.html')

    def test_product_detail(self):
        """Test product detail page loads correctly"""
        response = self.client.get(f'/products/{self.product.slug}/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'products/product_detail.html')

    def test_product_list_contains_product(self):
        """Test that the product list contains our test product"""
        response = self.client.get('/products/')
        self.assertContains(response, self.product.title)

class ProductModelTests(TestCase):
    def setUp(self):
        """Set up test data"""
        self.test_file = SimpleUploadedFile(
            name='test_file.pdf',
            content=b'file_content',
            content_type='application/pdf'
        )

    def test_product_creation(self):
        """Test creating a new product"""
        product = Product.objects.create(
            title='Test Product',
            description='Test Description',
            price=99.99,
            file=self.test_file,
            slug='test-product',
            category='test-category',
            image='product_images/test-image.jpg'
        )
        self.assertTrue(isinstance(product, Product))
        self.assertEqual(str(product), product.title)

    def test_product_str_method(self):
        """Test the string representation of the Product model"""
        product = Product.objects.create(
            title='Test Product',
            description='Test Description',
            price=99.99,
            file=self.test_file,
            slug='test-product',
            category='test-category',
            image='product_images/test-image.jpg'
        )
        self.assertEqual(str(product), 'Test Product')

    def test_product_fields(self):
        """Test product field values"""
        product = Product.objects.create(
            title='Test Product',
            description='Test Description',
            price=99.99,
            file=self.test_file,
            slug='test-product',
            category='test-category',
            image='product_images/test-image.jpg'
        )
        self.assertEqual(product.title, 'Test Product')
        self.assertEqual(product.description, 'Test Description')
        self.assertEqual(float(product.price), 99.99)
        self.assertEqual(product.slug, 'test-product')
        self.assertEqual(product.category, 'test-category')
        self.assertTrue(product.file)

    def tearDown(self):
        """Clean up test files"""
        for product in Product.objects.all():
            if product.file:
                product.file.delete()
            if product.image:
                product.image.delete()


=== ./products/urls.py ===
from django.urls import path
from . import views

urlpatterns = [
    path('', views.product_list, name='product_list'),
    path('<slug:slug>/', views.product_detail, name='product_detail'),
]


=== ./products/views.py ===
from django.shortcuts import render, get_object_or_404
from .models import Product

# Home view
def home(request):
    return render(request, 'products/home.html')

# Product listing view
def product_list(request):
    products = Product.objects.all()
    return render(request, 'products/product_list.html', {'products': products})

# Product detail view
def product_detail(request, slug):
    product = get_object_or_404(Product, slug=slug)
    return render(request, 'products/product_detail.html', {'product': product})



=== ./profiles/__init__.py ===



=== ./profiles/admin.py ===
from django.contrib import admin
from .models import Profile  

admin.site.register(Profile)  


=== ./profiles/apps.py ===
from django.apps import AppConfig


class ProfilesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'profiles'



=== ./profiles/migrations/0001_initial.py ===
# Generated by Django 5.1.2 on 2024-10-26 18:44

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]



=== ./profiles/migrations/0002_profile_delete_userprofile.py ===
# Generated by Django 5.1.2 on 2024-10-27 13:18

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('profiles', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, null=True)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profile_images/')),
                ('location', models.CharField(blank=True, max_length=100, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.DeleteModel(
            name='UserProfile',
        ),
    ]



=== ./profiles/migrations/__init__.py ===



=== ./profiles/models.py ===
from django.db import models
from django.contrib.auth.models import User

class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    bio = models.TextField(blank=True, null=True)
    profile_image = models.ImageField(upload_to='profile_images/', blank=True, null=True)
    location = models.CharField(max_length=100, blank=True, null=True)

    def __str__(self):
        return f"{self.user.username}'s Profile"



=== ./profiles/tests.py ===
from django.test import TestCase

# Create your tests here.



=== ./profiles/views.py ===
from django.shortcuts import render

# Create your views here.



=== ./templates/base.html ===
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Pixel and Paper{% endblock %}</title>
    <link href="https://fonts.googleapis.com/css2?family=Cormorant+Garamond:wght@300;400;500;600&family=Montserrat:wght@300;400;500&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'css/styles.css' %}">
</head>
<body>
    <header>
        <div class="announcement-bar">
            Free shipping on orders over ¬£150
        </div>
        <nav class="main-nav">
            <div class="nav-left">
                <a href="{% url 'product_list' %}">Shop</a>
                <a href="#">About</a>
            </div>
            <div class="logo">
                <a href="{% url 'home' %}">Pixel and Paper</a>
            </div>
            <div class="nav-right">
                <a href="#">Account</a>
                <a href="#">Cart (0)</a>
            </div>
        </nav>
    </header>

    <main>
        {% block content %}
        {% endblock %}
    </main>

    <footer>
        <div class="footer-content">
            <div class="footer-section">
                <h3>About Us</h3>
                <p>Pixel and Paper offers curated art supplies and materials for artists and creators.</p>
            </div>
            <div class="footer-section">
                <h3>Quick Links</h3>
                <ul>
                    <li><a href="{% url 'product_list' %}">Shop</a></li>
                    <li><a href="#">About</a></li>
                    <li><a href="#">Contact</a></li>
                    <li><a href="#">Shipping</a></li>
                </ul>
            </div>
            <div class="footer-section">
                <h3>Newsletter</h3>
                <p>Subscribe for updates and exclusive offers.</p>
                <form class="newsletter-form">
                    <input type="email" placeholder="Your email">
                    <button type="submit">Subscribe</button>
                </form>
            </div>
        </div>
        <div class="footer-bottom">
            <p>&copy; 2024 Pixel and Paper. All rights reserved.</p>
        </div>
    </footer>
</body>
</html>


=== ./templates/products/home.html ===
{% extends 'base.html' %}

{% block content %}
<div class="hero-section">
    <div class="hero-content">
        <h1>Discover Beautiful Art Supplies</h1>
        <p>Curated materials for creative minds</p>
        <a href="{% url 'product_list' %}" class="cta-button">Shop Now</a>
    </div>
</div>

<section class="featured-categories">
    <h2>Shop Categories</h2>
    <div class="category-grid">
        <div class="category-card">
            <img src="https://images.unsplash.com/photo-1454942901704-3c44c11b2ad1?w=600" alt="Digital Art">
            <h3>Digital Art</h3>
            <a href="#" class="category-link">Shop Digital</a>
        </div>
        <div class="category-card">
            <img src="https://images.unsplash.com/photo-1460661419201-fd4cecdf8a8b?w=600" alt="Traditional Art">
            <h3>Traditional Art</h3>
            <a href="#" class="category-link">Shop Traditional</a>
        </div>
        <div class="category-card">
            <img src="https://images.unsplash.com/photo-1513364776144-60967b0f800f?w=600" alt="Art Papers">
            <h3>Art Papers</h3>
            <a href="#" class="category-link">Shop Papers</a>
        </div>
    </div>
</section>

<section class="about-section">
    <div class="about-content">
        <h2>About Pixel and Paper</h2>
        <p>We believe in providing artists with the finest materials to bring their visions to life. Each product in our collection is carefully selected for quality and performance.</p>
        <a href="#" class="about-link">Learn More</a>
    </div>
</section>

<section class="featured-products">
    <h2>Featured Products</h2>
    <div class="product-grid">
        {% for product in products %}
        <div class="product-card">
            <img src="{{ product.image.url }}" alt="{{ product.title }}">
            <h3>{{ product.title }}</h3>
            <p class="price">${{ product.price }}</p>
            <a href="{% url 'product_detail' product.slug %}" class="product-link">View Details</a>
        </div>
        {% endfor %}
    </div>
</section>
{% endblock %}


=== ./templates/products/product_detail.html ===
{% extends 'base.html' %}

{% block content %}
<div class="product-detail">
    <div class="product-images">
        {% if product.image %}
        <div class="main-image">
            <img src="{{ product.image.url }}" alt="{{ product.title }}">
        </div>
        {% endif %}
    </div>
    
    <div class="product-info">
        <h1>{{ product.title }}</h1>
        <p class="price">¬£{{ product.price }}</p>
        
        <div class="product-description">
            {{ product.description|linebreaks }}
        </div>
        
        <form class="add-to-cart-form" method="POST" action="#">
            {% csrf_token %}
            <div class="quantity-selector">
                <label for="quantity">Quantity:</label>
                <select name="quantity" id="quantity">
                    {% for i in "12345"|make_list %}
                    <option value="{{ i }}">{{ i }}</option>
                    {% endfor %}
                </select>
            </div>
            
            <button type="submit" class="add-to-cart-button">Add to Cart</button>
        </form>
        
        <div class="product-meta">
            <p class="category">Category: {{ product.category }}</p>
        </div>
    </div>
</div>

{% if related_products %}
<section class="related-products">
    <h2>You May Also Like</h2>
    <div class="product-grid">
        {% for related in related_products %}
        <div class="product-card">
            {% if related.image %}
            <img src="{{ related.image.url }}" alt="{{ related.title }}">
            {% endif %}
            <h3>{{ related.title }}</h3>
            <p class="price">¬£{{ related.price }}</p>
            <a href="{% url 'product_detail' related.slug %}" class="product-link">View Details</a>
        </div>
        {% endfor %}
    </div>
</section>
{% endif %}
{% endblock %}


=== ./templates/products/product_list.html ===
{% extends 'base.html' %}

{% block content %}
<div class="shop-header">
    <h1>Shop Our Collection</h1>
    
    <div class="shop-filters">
        <div class="category-filter">
            <select onchange="window.location.href=this.value">
                <option value="{% url 'product_list' %}">All Categories</option>
                {% for category in categories %}
                <option value="{% url 'product_list' %}?category={{ category }}" 
                    {% if request.GET.category == category %}selected{% endif %}>
                    {{ category }}
                </option>
                {% endfor %}
            </select>
        </div>
        
        <form class="search-form" method="GET" action="{% url 'product_list' %}">
            <input type="text" name="q" placeholder="Search products..." 
                   value="{{ request.GET.q }}">
            <button type="submit">Search</button>
        </form>
    </div>
</div>

<div class="product-grid">
    {% for product in products %}
    <div class="product-card">
        {% if product.image %}
        <img src="{{ product.image.url }}" alt="{{ product.title }}">
        {% endif %}
        <h3>{{ product.title }}</h3>
        <p class="price">${{ product.price }}</p>
        <a href="{% url 'product_detail' product.slug %}" class="product-link">View Details</a>
    </div>
    {% empty %}
    <p class="no-products">No products found.</p>
    {% endfor %}
</div>
{% endblock %}


=== ./templates/products/views.py ===
# products/views.py
from django.shortcuts import render, get_object_or_404
from .models import Product

def home(request):
    """View for home page"""
    featured_products = Product.objects.all()[:3]  # Get first 3 products for featured section
    context = {
        'products': featured_products,
    }
    return render(request, 'products/home.html', context)

def product_list(request):
    """View for product list page"""
    products = Product.objects.all()
    
    # Handle search queries
    query = request.GET.get('q')
    if query:
        products = products.filter(title__icontains=query)
    
    # Handle category filtering
    category = request.GET.get('category')
    if category:
        products = products.filter(category=category)
    
    context = {
        'products': products,
        'categories': Product.objects.values_list('category', flat=True).distinct()
    }
    return render(request, 'products/product_list.html', context)

def product_detail(request, slug):
    """View for product detail page"""
    product = get_object_or_404(Product, slug=slug)
    related_products = Product.objects.filter(category=product.category).exclude(id=product.id)[:3]
    
    context = {
        'product': product,
        'related_products': related_products,
    }
    return render(request, 'products/product_detail.html', context)


