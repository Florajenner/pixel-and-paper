]633;E;for file in $(find . -type f -name "*.py" -o -name "*.html");62a4397c-9724-46a6-80b4-277aca003538]633;C=== ./.vscode/arctictern.py ===
"""
arctictern.py
A little script that does a big migration
"""

import json
import os
import requests
import shutil
import subprocess
import sys
from os.path import exists

COLOURS = {"red": "\033[31m",
           "blue": "\033[34m",
           "green": "\033[32m",
           "reset": "\033[0m",
           "bold": "\033[1m"}

BASE_URL = "https://raw.githubusercontent.com/Code-Institute-Org/gitpod-full-template/main/"
CURRENT_VERSION = 1.0
THIS_VERSION = 1.0


UPGRADE_FILE_LIST = [{"filename": ".vscode/settings.json",
                      "url": ".vscode/settings.json"
                      },
                     {"filename": ".vscode/launch.json",
                      "url": ".vscode/launch.json"
                      },
                     {"filename": ".gitpod.yml",
                      "url": ".gitpod.yml"
                      },
                     {"filename": ".gitpod.dockerfile",
                      "url": ".gitpod.dockerfile"
                      },
                     {"filename": ".vscode/heroku_config.sh",
                      "url": ".vscode/heroku_config.sh"
                      },
                     {"filename": ".vscode/init_tasks.sh",
                      "url": ".vscode/init_tasks.sh"
                      },
                     {"filename": ".vscode/uptime.sh",
                      "url": ".vscode/uptime.sh"
                      },
                     {"filename": ".vscode/make_url.py",
                      "url": ".vscode/make_url.py"
                     },
                     {"filename": ".vscode/arctictern.py",
                      "url": ".vscode/arctictern.py"
                     }]

FINAL_LINES = "\nexport POST_UPGRADE_RUN=1\nsource ~/.bashrc\n"


def get_versions():

    if exists(".vscode/version.txt"):
        with open(".vscode/version.txt", "r") as f:
            THIS_VERSION = float(f.read().strip())
    else:
        with open(".vscode/version.txt", "w") as f:
            f.write(str(THIS_VERSION))
    
    r = requests.get(BASE_URL + ".vscode/version.txt")
    CURRENT_VERSION = float(r.content)

    return {"this_version": THIS_VERSION,
            "current_version": CURRENT_VERSION}

def needs_upgrade():
    """
    Checks the version of the current template against
    this version.
    Returns True if upgrade is needed, False if not.
    """

    versions = get_versions()
    
    print(f"Upstream version: {versions['current_version']}")
    print(f"Local version: {versions['this_version']}")

    return versions["current_version"] > versions["this_version"]


def write_version():

    versions = get_versions()

    with open(".vscode/version.txt", "w") as f:
        f.write(str(versions["current_version"]))


def build_post_upgrade():

    r = requests.get(BASE_URL + ".vscode/upgrades.json")
    upgrades = json.loads(r.content.decode("utf-8"))
    content = ""

    for k,v in upgrades.items():
        if float(k) > THIS_VERSION:
            print(f"Adding version changes for {k} to post_upgrade.sh")
            content += v

    if content:
        content += FINAL_LINES
        with open(".vscode/post_upgrade.sh", "w") as f:
            f.writelines(content)
    
    print("Built post_upgrade.sh. Restart your workspace for it to take effect.")


def process(file, suffix):
    """
    Replaces and optionally backs up the files that
    need to be changed.
    Arguments: file - a path and filename
               suffix - the suffix to the BASE_URL
    """

    if file == ".gitpod.dockerfile" or file == ".gitpod.yml":
        try:
            shutil.copyfile(file, f"{file}.tmp")
        except FileNotFoundError:
            pass

    with open(file, "wb") as f:
        r = requests.get(BASE_URL + suffix)
        f.write(r.content)

    if exists(f"{file}.tmp"):
        result = os.system(f"diff -q {file} {file}.tmp > /dev/null")
        if result != 0:
            os.remove(f"{file}.tmp")
            return True
    
    return False


def start_migration():
    """
    Calls the process function and
    renames the directory
    """
    push_and_recreate = False

    if not os.path.isdir(".vscode"):
        print("Creating .vscode directory")
        os.mkdir(".vscode")

    for file in UPGRADE_FILE_LIST:
        print(f"Processing: {file['filename']}")
        result = process(file["filename"], file["url"])
        if result == True:
            push_and_recreate = True
    
    if push_and_recreate:
        write_version()

    if needs_upgrade() and not push_and_recreate:
        build_post_upgrade()

    print("Changes saved.")
    print("Please add, commit and push to GitHub.")
    print("You may need to stop and restart your workspace for")
    print("the changes to take effect.\n")

    if push_and_recreate:
        print(f"{COLOURS['red']}{COLOURS['bold']}*** IMPORTANT INFORMATION ***{COLOURS['reset']}")
        print("The files used to create this workspace have been updated")
        print("Please download any files that are in .gitignore and")
        print("recreate this workspace by clicking on the Gitpod button")
        print("in GitHub. Then, upload your saved files again.\n")


if __name__ == "__main__":

    print(f"\nüê¶ {COLOURS['blue']}{COLOURS['bold']}ArcticTern version 0.3{COLOURS['reset']}")
    print("CI Template Migration Utility")
    print("-----------------------------")
    print("Upgrades the workspace to the latest version.\n")

    if input("Start? Y/N ").lower() == "y":
        start_migration()
    else:
        sys.exit("Migration cancelled by the user")



=== ./.vscode/make_url.py ===
# Simple utility for creating the Cloudinary URL from a
# cloudinary_python.txt file
# Matt Rudge, November 2021

import re

with open("cloudinary_python.txt") as f:
    content = f.readlines()

cloud_name = re.findall(r"['](.*?)[']",content[15])[0]
api_key = re.findall(r"['](.*?)[']",content[16])[0]
api_secret = re.findall(r"['](.*?)[']",content[17])[0]

print(f"cloudinary://{api_key}:{api_secret}@{cloud_name}")



=== ./accounts/__init__.py ===



=== ./accounts/admin.py ===
from django.contrib import admin

# Register your models here.



=== ./accounts/apps.py ===
from django.apps import AppConfig


class AccountsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'accounts'



=== ./accounts/migrations/__init__.py ===



=== ./accounts/models.py ===
from django.db import models

# Create your models here.



=== ./accounts/tests.py ===
from django.test import TestCase

# Create your tests here.



=== ./accounts/urls.py ===
from django.urls import path
from . import views

urlpatterns = [
    path('register/', views.register, name='register'),
    path('profile/', views.profile, name='profile'),
]


=== ./accounts/views.py ===
from django.shortcuts import render, redirect
from django.contrib.auth.forms import UserCreationForm
from django.contrib import messages
from django.contrib.auth.decorators import login_required

def register(request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Account created successfully!')
            return redirect('login')
    else:
        form = UserCreationForm()
    return render(request, 'registration/register.html', {'form': form})




@login_required
def profile(request):
    return render(request, 'accounts/profiles.html')


=== ./cart/__init__.py ===



=== ./cart/admin.py ===
from django.contrib import admin
from .models import Cart, CartItem

admin.site.register(Cart)
admin.site.register(CartItem)


=== ./cart/apps.py ===
from django.apps import AppConfig

class CartConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'cart'


=== ./cart/context_processors.py ===
from .views import get_or_create_cart

def cart_context(request):
    cart = get_or_create_cart(request)
    return {
        'cart': cart,
        'cart_count': cart.get_item_count() if hasattr(cart, 'get_item_count') else 0
    }


=== ./cart/migrations/0001_initial.py ===
# Generated by Django 5.1.3 on 2024-11-19 20:46

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0002_product_category_product_image_alter_product_file'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('session_id', models.CharField(blank=True, max_length=100, null=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='cart.cart')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product')),
            ],
        ),
    ]



=== ./cart/migrations/__init__.py ===



=== ./cart/models.py ===
from django.db import models
from django.contrib.auth.models import User
from products.models import Product

class Cart(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    session_id = models.CharField(max_length=100, null=True, blank=True)

    def get_total(self):
        total = sum(item.get_subtotal() for item in self.items.all())
        return total if total else 0

    def get_item_count(self):
        count = self.items.aggregate(total=models.Sum('quantity'))['total']
        return count if count else 0

    def __str__(self):
        return f"Cart {self.id}"

class CartItem(models.Model):
    cart = models.ForeignKey(Cart, related_name='items', on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField(default=1)
    added_at = models.DateTimeField(auto_now_add=True)

    def get_subtotal(self):
        return self.product.price * self.quantity


=== ./cart/tests.py ===
from django.test import TestCase

# Create your tests here.



=== ./cart/urls.py ===
from django.urls import path
from . import views

urlpatterns = [
    path('', views.cart_view, name='cart_view'),
    path('add/<int:product_id>/', views.add_to_cart, name='add_to_cart'),
    path('update/<int:item_id>/', views.update_cart, name='update_cart'),
    path('remove/<int:item_id>/', views.remove_from_cart, name='remove_from_cart'),
]



=== ./cart/views.py ===
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.http import JsonResponse
from django.views.decorators.csrf import ensure_csrf_cookie
from django.conf import settings
from .models import Cart, CartItem
from products.models import Product
from decimal import Decimal
from utils.decorators import role_required


@role_required(['admin'])
def get_or_create_cart(request):
    if request.user.is_authenticated:
        cart, created = Cart.objects.get_or_create(user=request.user)
    else:
        session_key = request.session.session_key
        if not session_key:
            request.session.create()
            session_key = request.session.session_key
        cart, created = Cart.objects.get_or_create(session_id=session_key)
    return cart

@ensure_csrf_cookie
def cart_view(request):
    cart = get_or_create_cart(request)
    context = {
        'cart': cart,
        'cart_items': cart.items.select_related('product').all(),
        'total': cart.get_total(),
        'stripe_public_key': settings.STRIPE_PUBLIC_KEY,
    }
    return render(request, 'cart/cart.html', context)

def add_to_cart(request, product_id):
    if request.method == 'POST':
        try:
            quantity = int(request.POST.get('quantity', 1))
            if quantity < 1:
                raise ValueError("Quantity must be positive")
            
            product = get_object_or_404(Product, id=product_id)
            cart = get_or_create_cart(request)
            
            cart_item, created = CartItem.objects.get_or_create(
                cart=cart,
                product=product,
                defaults={'quantity': quantity}
            )
            
            if not created:
                cart_item.quantity += quantity
                cart_item.save()
            
            messages.success(request, f"{product.title} added to cart.")
            return redirect('cart_view')
            
        except (ValueError, TypeError) as e:
            messages.error(request, "Invalid quantity specified.")
        except Product.DoesNotExist:
            messages.error(request, "Product not found.")
        except Exception as e:
            messages.error(request, "Error adding item to cart.")
            
    return redirect('cart_view')

def update_cart(request, item_id):
    if request.method == 'POST':
        try:
            cart_item = get_object_or_404(CartItem, id=item_id)
            quantity = int(request.POST.get('quantity', 0))
            
            if quantity > 0:
                cart_item.quantity = quantity
                cart_item.save()
            else:
                cart_item.delete()
                
            cart = cart_item.cart
            subtotal = float(cart_item.get_subtotal())
            cart_total = float(cart.get_total())
            
            return JsonResponse({
                'subtotal': subtotal,
                'cart_total': cart_total,
                'item_count': cart.get_item_count()
            })
            
        except (CartItem.DoesNotExist, ValueError, TypeError):
            return JsonResponse({'error': 'Invalid request'}, status=400)
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
            
    return JsonResponse({'error': 'Invalid method'}, status=405)

def remove_from_cart(request, item_id):
    if request.method == 'POST':
        try:
            cart_item = get_object_or_404(CartItem, id=item_id)
            cart_item.delete()
            messages.success(request, "Item removed from cart.")
        except CartItem.DoesNotExist:
            messages.error(request, "Item not found.")
        except Exception:
            messages.error(request, "Error removing item from cart.")
            
    return redirect('cart_view')




=== ./checkout/urls.py ===
from django.urls import path
from . import views, webhooks

urlpatterns = [
    path('create-checkout-session/', views.create_checkout_session, name='create_checkout_session'),
    path('create-checkout-session/<int:product_id>/', views.create_checkout_session, name='create_checkout_session'),
    path('success/', views.success_view, name='checkout_success'),
    path('cancel/', views.cancel_view, name='checkout_cancel'),
    path('wh/', webhooks.webhook, name='webhook'),
]


=== ./checkout/views.py ===
from django.shortcuts import render
from django.http import JsonResponse
from django.views.decorators.http import require_http_methods
from django.conf import settings
from cart.views import get_or_create_cart
import stripe

stripe.api_key = settings.STRIPE_SECRET_KEY

@require_http_methods(["POST"])
def create_checkout_session(request, product_id=None):
    try:
        cart = get_or_create_cart(request)
        
        if product_id:
            # Single product checkout
            product = Product.objects.get(id=product_id)
            line_items = [{
                'price_data': {
                    'currency': 'gbp',
                    'unit_amount': int(float(product.price) * 100),
                    'product_data': {
                        'name': product.title,
                        'description': str(product.description)[:500] if product.description else '',
                    },
                },
                'quantity': 1,
            }]
        else:
            # Cart checkout
            if not cart or not cart.items.exists():
                return JsonResponse({'error': 'Cart is empty'}, status=400)

            line_items = []
            for item in cart.items.all():
                line_items.append({
                    'price_data': {
                        'currency': 'gbp',
                        'unit_amount': int(float(item.product.price) * 100),
                        'product_data': {
                            'name': item.product.title,
                            'description': str(item.product.description)[:500] if item.product.description else '',
                        },
                    },
                    'quantity': item.quantity,
                })

        checkout_session = stripe.checkout.Session.create(
            payment_method_types=['card'],
            line_items=line_items,
            mode='payment',
            success_url=request.build_absolute_uri('/checkout/success/'),
            cancel_url=request.build_absolute_uri('/checkout/cancel/'),
            metadata={
                'cart_id': cart.id if not product_id else None,
                'product_id': product_id if product_id else None,
            }
        )

        return JsonResponse({'sessionId': checkout_session.id})
    except Exception as e:
        print(f"Stripe error: {str(e)}")
        return JsonResponse({'error': str(e)}, status=400)

def success_view(request):
    cart = get_or_create_cart(request)
    cart.items.all().delete()  # Clear the cart after successful purchase
    return render(request, 'checkout/success.html')

def cancel_view(request):
    return render(request, 'checkout/cancel.html')


=== ./checkout/webhook_handler.py ===
from django.http import HttpResponse
from orders.models import Order
import stripe
import json
import time
from utils.decorators import role_required

class StripeWH_Handler:
    """Handle Stripe webhooks"""

    def __init__(self, request):
        self.request = request

    def handle_event(self, event):
        """Handle a generic/unknown/unexpected webhook event"""
        return HttpResponse(
            content=f'Unhandled webhook received: {event["type"]}',
            status=200)

    @role_required(['admin'])
    def handle_payment_intent_succeeded(self, event):
        """Handle the payment_intent.succeeded webhook"""
        intent = event.data.object
        pid = intent.id
        stripe_charge = stripe.Charge.retrieve(intent.latest_charge)
        billing_details = stripe_charge.billing_details
        grand_total = round(stripe_charge.amount / 100, 2)

        # Update order
        order_exists = False
        attempt = 1
        while attempt <= 5:
            try:
                order = Order.objects.get(stripe_pid=pid)
                order.is_paid = True
                order.save()
                order_exists = True
                break
            except Order.DoesNotExist:
                attempt += 1
                time.sleep(1)

        if order_exists:
            return HttpResponse(
                content=f'Webhook received: {event["type"]} | SUCCESS: Order already in database',
                status=200)
        else:
            return HttpResponse(
                content=f'Webhook received: {event["type"]} | ERROR: Order not found',
                status=500)

    def handle_payment_intent_payment_failed(self, event):
        """Handle the payment_intent.payment_failed webhook"""
        return HttpResponse(
            content=f'Webhook received: {event["type"]} | Payment Failed',
            status=200)





=== ./checkout/webhooks.py ===
import stripe
from django.conf import settings
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
from .webhook_handler import StripeWH_Handler

@require_POST
@csrf_exempt
def webhook(request):
    """Listen for webhooks from Stripe"""
    wh_secret = settings.STRIPE_WH_SECRET
    stripe.api_key = settings.STRIPE_SECRET_KEY

    # Get the webhook data and verify signature
    payload = request.body
    sig_header = request.META['HTTP_STRIPE_SIGNATURE']
    event = None

    try:
        event = stripe.Webhook.construct_event(
            payload, sig_header, wh_secret
        )
    except ValueError as e:
        return HttpResponse(status=400)
    except stripe.error.SignatureVerificationError as e:
        return HttpResponse(status=400)

    # Set up webhook handler
    handler = StripeWH_Handler(request)

    # Map webhook events to relevant handler functions
    event_map = {
        'payment_intent.succeeded': handler.handle_payment_intent_succeeded,
        'payment_intent.payment_failed': handler.handle_payment_intent_payment_failed,
    }

    # Get the webhook type from Stripe
    event_type = event['type']

    # If there's a handler for it, get it from the event map
    event_handler = event_map.get(event_type, handler.handle_event)

    # Call the event handler with the event
    response = event_handler(event)
    return response


=== ./custom_storages.py ===
from django.conf import settings
from storages.backends.s3boto3 import S3Boto3Storage

class StaticStorage(S3Boto3Storage):
    location = settings.STATICFILES_LOCATION

class MediaStorage(S3Boto3Storage):
    location = settings.MEDIAFILES_LOCATION


=== ./manage.py ===
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pixel_and_paper.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()



=== ./marketing/__init__.py ===



=== ./marketing/admin.py ===
from django.contrib import admin

# Register your models here.



=== ./marketing/apps.py ===
from django.apps import AppConfig


class MarketingConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'marketing'



=== ./marketing/migrations/0001_initial.py ===
# Generated by Django 5.1.3 on 2024-11-18 19:27

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='NewsletterSubscriber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
    ]



=== ./marketing/migrations/__init__.py ===



=== ./marketing/models.py ===
from django.db import models

class NewsletterSubscriber(models.Model):
    email = models.EmailField(unique=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.email


=== ./marketing/tests.py ===
from django.test import TestCase

# Create your tests here.



=== ./marketing/urls.py ===
from django.urls import path
from . import views

urlpatterns = [
    path('newsletter-signup/', views.newsletter_signup, name='newsletter_signup'),
    path('test-email/', views.test_email, name='test_email'),
]


=== ./marketing/views.py ===
from django.core.mail import send_mail
from django.http import HttpResponse
from django.conf import settings
import traceback
from django.core.mail.backends.smtp import EmailBackend
from django.shortcuts import redirect
from django.contrib import messages
from .models import NewsletterSubscriber

def test_email(request):
    try:
        # Create a custom email backend with specific local address
        connection = EmailBackend(
            host=settings.EMAIL_HOST,
            port=settings.EMAIL_PORT,
            username=settings.EMAIL_HOST_USER,
            password=settings.EMAIL_HOST_PASSWORD,
            use_tls=settings.EMAIL_USE_TLS,
            fail_silently=False,
            timeout=30,
            local_hostname='localhost'  # Specify local hostname
        )
        
        # Send email using this connection
        send_mail(
            subject='Test Email',
            message='This is a test email from your Django app.',
            from_email=settings.EMAIL_HOST_USER,
            recipient_list=[settings.EMAIL_HOST_USER],
            connection=connection,
            fail_silently=False,
        )
        return HttpResponse('Test email sent successfully!')
    except Exception as e:
        error_trace = traceback.format_exc()
        return HttpResponse(f'Error sending email:\n{str(e)}\n\nTraceback:\n{error_trace}')


def newsletter_signup(request):
    if request.method == 'POST':
        email = request.POST.get('email')
        try:
            NewsletterSubscriber.objects.create(email=email)
            messages.success(request, 'Successfully subscribed to newsletter!')
        except:
            messages.error(request, 'Something went wrong or email already exists')
    return redirect('home')


=== ./orders/__init__.py ===



=== ./orders/admin.py ===
from django.contrib import admin
from .models import Order

admin.site.register(Order)  


=== ./orders/apps.py ===
from django.apps import AppConfig


class OrdersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'orders'



=== ./orders/migrations/0001_initial.py ===
# Generated by Django 5.1.2 on 2024-10-26 18:44

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_ordered', models.DateTimeField(auto_now_add=True)),
                ('paid', models.BooleanField(default=False)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]



=== ./orders/migrations/0002_rename_paid_order_is_paid_and_more.py ===
# Generated by Django 5.1.2 on 2024-10-27 13:21

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('orders', '0001_initial'),
    ]

    operations = [
        migrations.RenameField(
            model_name='order',
            old_name='paid',
            new_name='is_paid',
        ),
        migrations.RenameField(
            model_name='order',
            old_name='date_ordered',
            new_name='order_date',
        ),
    ]



=== ./orders/migrations/__init__.py ===



=== ./orders/models.py ===
from django.db import models
from django.contrib.auth.models import User
from products.models import Product

class Order(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    order_date = models.DateTimeField(auto_now_add=True)
    is_paid = models.BooleanField(default=False)

    def __str__(self):
        return f"Order {self.id} - {self.user.username}"



=== ./orders/tests.py ===
from django.test import TestCase

# Create your tests here.



=== ./orders/views.py ===
from django.shortcuts import render

# Create your views here.



=== ./pixel_and_paper/__init__.py ===



=== ./pixel_and_paper/asgi.py ===
"""
ASGI config for pixel_and_paper project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pixel_and_paper.settings')

application = get_asgi_application()



=== ./pixel_and_paper/settings.py ===
import os
if os.path.exists("env.py"):
    import env
from pathlib import Path
from dotenv import load_dotenv
import dj_database_url

BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv()

SECRET_KEY = os.environ.get('SECRET_KEY', 'your-default-secret-key')
DEBUG = 'DEVELOPMENT' in os.environ

ALLOWED_HOSTS = [
    'pixel-and-paper.herokuapp.com',
    'localhost',
    '127.0.0.1',
    '8000-florajenner-pixelandpap-xrmzfff1cqb.ws.codeinstitute-ide.net'
]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sitemaps',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'storages',
    'crispy_forms',
    'products',
    'profiles',
    'orders',
    'checkout',
    'cart',
    'marketing',
    'whitenoise.runserver_nostatic',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'pixel_and_paper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'templates', 'allauth'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'cart.context_processors.cart_context',
                'pixel_and_paper.context_processors.meta_tags',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

SITE_ID = 1

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get('EMAIL_HOST', '')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '587'))
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

DATABASES = {
    'default': dj_database_url.parse(os.environ.get('DATABASE_URL', ''))
}

if 'USE_AWS' in os.environ:
    AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_REGION_NAME = 'eu-west-1'
    AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'

    STATICFILES_STORAGE = 'custom_storages.StaticStorage'
    STATICFILES_LOCATION = 'static'
    DEFAULT_FILE_STORAGE = 'custom_storages.MediaStorage'
    MEDIAFILES_LOCATION = 'media'
    



    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{STATICFILES_LOCATION}/'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{MEDIAFILES_LOCATION}/'

    AWS_S3_OBJECT_PARAMETERS = {
        'Expires': 'Thu, 31 Dec 2099 20:00:00 GMT',
        'CacheControl': 'max-age=94608000',
    }
else:
    STATIC_URL = '/static/'
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'static'),
    ]
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

STRIPE_PUBLIC_KEY = os.environ.get('STRIPE_PUBLIC_KEY', '')
STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY', '')
STRIPE_WH_SECRET = os.environ.get('STRIPE_WH_SECRET', '')

if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

LOGIN_URL = 'account_login'
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'

CRISPY_TEMPLATE_PACK = 'bootstrap4'

META_DESCRIPTION = "Download beautiful digital wall art. Instant delivery of high-quality prints."
META_KEYWORDS = "digital art, wall art, prints, downloadable art, home decor"


=== ./pixel_and_paper/sitemaps.py ===
from django.contrib.sitemaps import Sitemap
from django.urls import reverse
from products.models import Product

class StaticViewSitemap(Sitemap):
    priority = 0.5
    changefreq = 'daily'

    def items(self):
        return ['home', 'product_list']

    def location(self, item):
        return reverse(item)

class ProductSitemap(Sitemap):
    changefreq = "weekly"
    priority = 0.9

    def items(self):
        return Product.objects.all()

    def location(self, obj):
        return reverse('product_detail', args=[obj.slug])


=== ./pixel_and_paper/urls.py ===
from django.contrib import admin 
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static
from django.contrib.sitemaps.views import sitemap
from django.views.generic import TemplateView
from products import views as product_views
from marketing import views as marketing_views
from django.contrib.auth import views as auth_views
from .sitemaps import StaticViewSitemap, ProductSitemap

sitemaps = {
    'static': StaticViewSitemap,
    'products': ProductSitemap,
}

urlpatterns = [
    path('', product_views.home, name='home'),
    path('products/', include('products.urls')),
    path('marketing/', include('marketing.urls')),
    path('checkout/', include('checkout.urls')),
    path('admin/', admin.site.urls),
    path('cart/', include('cart.urls')),
    path('accounts/', include('django.contrib.auth.urls')),
    path('accounts/', include('accounts.urls')),
    path('sitemap.xml', sitemap, {'sitemaps': sitemaps}, name='django.contrib.sitemaps.views.sitemap'),
    path('robots.txt', TemplateView.as_view(template_name="robots.txt", content_type="text/plain")),
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)


=== ./pixel_and_paper/views.py ===
from django.shortcuts import render
from django.contrib.auth.forms import UserCreationForm
from django.contrib import messages

def handler404(request, exception):
    return render(request, '404.html', status=404)

def handler500(request):
    return render(request, '500.html', status=500)

    from django.shortcuts import render, redirect

def register(request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Account created successfully!')
            return redirect('login')
    else:
        form = UserCreationForm()
    return render(request, 'registration/register.html', {'form': form})


=== ./pixel_and_paper/wsgi.py ===
"""
WSGI config for pixel_and_paper project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pixel_and_paper.settings')

application = get_wsgi_application()



=== ./pixel_and_paper/context_processors.py ===
def meta_tags(request):
    return {
        'META_DESCRIPTION': "Download beautiful digital wall art. Instant delivery of high-quality prints.",
        'META_KEYWORDS': "digital art, wall art, prints, downloadable art, home decor"
    }


=== ./products/__init__.py ===



=== ./products/admin.py ===
from django.contrib import admin
from .models import Product  

admin.site.register(Product) 


=== ./products/apps.py ===
from django.apps import AppConfig


class ProductsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'products'



=== ./products/migrations/0001_initial.py ===
# Generated by Django 5.1.2 on 2024-10-26 18:44

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=6)),
                ('file', models.FileField(upload_to='downloads/')),
                ('slug', models.SlugField(unique=True)),
            ],
        ),
    ]



=== ./products/migrations/0002_product_category_product_image_alter_product_file.py ===
# Generated by Django 5.1.2 on 2024-10-27 19:15

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.CharField(default='Uncategorized', max_length=100),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='product',
            name='image',
            field=models.ImageField(blank=True, null=True, upload_to='product_images/'),
        ),
        migrations.AlterField(
            model_name='product',
            name='file',
            field=models.FileField(upload_to='product_images'),
        ),
    ]



=== ./products/migrations/0003_remove_product_file_remove_product_image_and_more.py ===
# Generated by Django 5.1.3 on 2024-11-25 12:39

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0002_product_category_product_image_alter_product_file'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='product',
            name='file',
        ),
        migrations.RemoveField(
            model_name='product',
            name='image',
        ),
        migrations.AddField(
            model_name='product',
            name='dimensions',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='product',
            name='downloadable_file',
            field=models.FileField(blank=True, null=True, upload_to='digital_downloads/'),
        ),
        migrations.AddField(
            model_name='product',
            name='file_format',
            field=models.CharField(blank=True, max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='product',
            name='preview_image',
            field=models.ImageField(blank=True, null=True, upload_to='preview_images/'),
        ),
        migrations.AlterField(
            model_name='product',
            name='category',
            field=models.CharField(choices=[('abstract', 'Abstract Art'), ('nature', 'Nature & Landscapes'), ('typography', 'Typography'), ('minimalist', 'Minimalist'), ('geometric', 'Geometric')], max_length=100),
        ),
    ]



=== ./products/migrations/__init__.py ===



=== ./products/models.py ===
from django.db import models

class Product(models.Model):
    CATEGORIES = [
        ('abstract', 'Abstract Art'),
        ('nature', 'Nature & Landscapes'),
        ('typography', 'Typography'),
        ('minimalist', 'Minimalist'),
        ('geometric', 'Geometric')
    ]
    
    title = models.CharField(max_length=255)
    description = models.TextField()
    price = models.DecimalField(max_digits=6, decimal_places=2)
    preview_image = models.ImageField(upload_to='preview_images/', null=True, blank=True)
    downloadable_file = models.FileField(upload_to='digital_downloads/', null=True, blank=True)
    slug = models.SlugField(unique=True)
    category = models.CharField(max_length=100, choices=CATEGORIES)
    dimensions = models.CharField(max_length=100, null=True, blank=True)
    file_format = models.CharField(max_length=50, null=True, blank=True)

    def __str__(self):
        return self.title


=== ./products/tests.py ===
# products/tests.py
from django.test import TestCase, Client
from django.urls import reverse
from django.contrib.auth.models import User
from .models import Product
from django.core.files.uploadedfile import SimpleUploadedFile

class PixelAndPaperTests(TestCase):
    def setUp(self):
        """Set up test data for all test methods"""
        self.client = Client()
        
        # Create test user
        self.user = User.objects.create_user(
            username='testuser',
            password='testpass123',
            email='test@example.com'
        )
        
        # Create a test file
        self.test_file = SimpleUploadedFile(
            name='test_file.pdf',
            content=b'file_content',
            content_type='application/pdf'
        )
        
        # Create test product with correct fields
        self.product = Product.objects.create(
            title='Test Product',
            description='Test Description',
            price=99.99,
            file=self.test_file,
            slug='test-product',
            category='test-category',
            image='product_images/test-image.jpg'
        )

    def test_home_page(self):
        """Test home page loads correctly"""
        response = self.client.get('/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'products/home.html')

    def test_product_list(self):
        """Test product list page loads correctly"""
        response = self.client.get('/products/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'products/product_list.html')

    def test_product_detail(self):
        """Test product detail page loads correctly"""
        response = self.client.get(f'/products/{self.product.slug}/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'products/product_detail.html')

    def test_product_list_contains_product(self):
        """Test that the product list contains our test product"""
        response = self.client.get('/products/')
        self.assertContains(response, self.product.title)

class ProductModelTests(TestCase):
    def setUp(self):
        """Set up test data"""
        self.test_file = SimpleUploadedFile(
            name='test_file.pdf',
            content=b'file_content',
            content_type='application/pdf'
        )

    def test_product_creation(self):
        """Test creating a new product"""
        product = Product.objects.create(
            title='Test Product',
            description='Test Description',
            price=99.99,
            file=self.test_file,
            slug='test-product',
            category='test-category',
            image='product_images/test-image.jpg'
        )
        self.assertTrue(isinstance(product, Product))
        self.assertEqual(str(product), product.title)

    def test_product_str_method(self):
        """Test the string representation of the Product model"""
        product = Product.objects.create(
            title='Test Product',
            description='Test Description',
            price=99.99,
            file=self.test_file,
            slug='test-product',
            category='test-category',
            image='product_images/test-image.jpg'
        )
        self.assertEqual(str(product), 'Test Product')

    def test_product_fields(self):
        """Test product field values"""
        product = Product.objects.create(
            title='Test Product',
            description='Test Description',
            price=99.99,
            file=self.test_file,
            slug='test-product',
            category='test-category',
            image='product_images/test-image.jpg'
        )
        self.assertEqual(product.title, 'Test Product')
        self.assertEqual(product.description, 'Test Description')
        self.assertEqual(float(product.price), 99.99)
        self.assertEqual(product.slug, 'test-product')
        self.assertEqual(product.category, 'test-category')
        self.assertTrue(product.file)

    def tearDown(self):
        """Clean up test files"""
        for product in Product.objects.all():
            if product.file:
                product.file.delete()
            if product.image:
                product.image.delete()


=== ./products/urls.py ===
from django.urls import path
from . import views

urlpatterns = [
    path('', views.product_list, name='product_list'),
    path('<slug:slug>/', views.product_detail, name='product_detail'),
]


=== ./products/views.py ===
from django.conf import settings
from django.shortcuts import render, get_object_or_404
from .models import Product
from utils.decorators import role_required

def home(request):
    featured_products = Product.objects.all()[:3]  # Get 3 featured products
    return render(request, 'products/home.html', {
        'products': featured_products
    })

@role_required(['admin', 'staff'])
def product_list(request):
    products = Product.objects.all()
    return render(request, 'products/product_list.html', {'products': products})

def product_detail(request, slug):
    product = get_object_or_404(Product, slug=slug)
    context = {
        'product': product,
        'stripe_public_key': settings.STRIPE_PUBLIC_KEY,
    }
    return render(request, 'products/product_detail.html', context)
    




=== ./profiles/__init__.py ===



=== ./profiles/admin.py ===
from django.contrib import admin
from .models import Profile  

admin.site.register(Profile)  


=== ./profiles/apps.py ===
from django.apps import AppConfig


class ProfilesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'profiles'



=== ./profiles/migrations/0001_initial.py ===
# Generated by Django 5.1.2 on 2024-10-26 18:44

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]



=== ./profiles/migrations/0002_profile_delete_userprofile.py ===
# Generated by Django 5.1.2 on 2024-10-27 13:18

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('profiles', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, null=True)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profile_images/')),
                ('location', models.CharField(blank=True, max_length=100, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.DeleteModel(
            name='UserProfile',
        ),
    ]



=== ./profiles/migrations/__init__.py ===



=== ./profiles/models.py ===
from django.db import models
from django.contrib.auth.models import User

class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    bio = models.TextField(blank=True, null=True)
    profile_image = models.ImageField(upload_to='profile_images/', blank=True, null=True)
    location = models.CharField(max_length=100, blank=True, null=True)

    def __str__(self):
        return f"{self.user.username}'s Profile"



=== ./profiles/tests.py ===
from django.test import TestCase

# Create your tests here.



=== ./profiles/views.py ===
from django.shortcuts import render

# Create your views here.



=== ./templates/404.html ===
{% extends "base.html" %}
{% block content %}
<div class="error-page">
    <h1>Page Not Found</h1>
    <p>Sorry, the page you're looking for doesn't exist.</p>
    <a href="{% url 'home' %}" class="button">Return Home</a>
</div>
{% endblock %}

# templates/500.html
{% extends "base.html" %}
{% block content %}
<div class="error-page">
    <h1>Server Error</h1>
    <p>Something went wrong. Please try again later.</p>
    <a href="{% url 'home' %}" class="button">Return Home</a>
</div>
{% endblock %}


=== ./templates/accounts/profiles.html ===
{% extends 'base.html' %}

{% block content %}
<div class="profile-container">
    <h2>Profile</h2>
    <div class="profile-info">
        <p><strong>Username:</strong> {{ user.username }}</p>
        <p><strong>Email:</strong> {{ user.email }}</p>
    </div>
</div>
{% endblock %}


=== ./templates/base.html ===
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="{% block meta_description %}{{ META_DESCRIPTION }}{% endblock %}">
    <meta name="keywords" content="{% block meta_keywords %}{{ META_KEYWORDS }}{% endblock %}">
    <meta name="author" content="Pixel and Paper">
    <meta property="og:title" content="{% block og_title %}{{ product.title|default:'Pixel and Paper' }}{% endblock %}">
    <meta property="og:description" content="{% block og_description %}{{ product.description|default:META_DESCRIPTION }}{% endblock %}">
    <meta property="og:type" content="website">
    <meta property="og:url" content="{{ request.build_absolute_uri }}">
    <meta property="og:site_name" content="Pixel and Paper">
    <meta property="og:image" content="{% block og_image %}{{ product.preview_image.url|default:'' }}{% endblock %}">
    <meta name="twitter:card" content="summary_large_image">
    <link rel="canonical" href="{{ request.build_absolute_uri }}" />
    <title>{% block title %}Pixel and Paper{% endblock %}</title>
    
<!-- CSS -->
<link rel="stylesheet" href="{% static 'css/style.css' %}">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    {% if messages %}
<div class="message-container">
    {% for message in messages %}
        <div class="alert {% if message.tags %}alert-{{ message.tags }}{% endif %} fade show" role="alert">
            {{ message }}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    {% endfor %}
</div>

<script>
document.querySelectorAll('.btn-close').forEach(button => {
    button.addEventListener('click', function() {
        this.closest('.alert').remove();
    });
});

setTimeout(() => {
    document.querySelectorAll('.alert').forEach(alert => {
        alert.remove();
    });
}, 5000);
</script>
{% endif %}
    <header>
        <div class="announcement-bar">
            Free shipping on orders over ¬£150
        </div>
        <nav class="main-nav">
            <div class="nav-left">
                <a href="{% url 'product_list' %}">Shop</a>
                <a href="#">About</a>
            </div>
            <div class="logo">
                <a href="{% url 'home' %}">Pixel and Paper</a>
            </div>
            <div class="nav-right">
                {% if user.is_authenticated %}
                    <a href="{% url 'profile' %}">{{ user.username }}</a>
                    <form method="post" action="{% url 'logout' %}" style="display: inline;">
                        {% csrf_token %}
                        <button type="submit" class="logout-link" style="background: none; border: none; color: inherit; cursor: pointer; padding: 0;">Logout</button>
                    </form>
                {% else %}
                    <a href="{% url 'login' %}">Login</a>
                {% endif %}
                <a href="{% url 'cart_view' %}">Cart ({{ cart.get_item_count|default:"0" }})</a>
            </div>
        </nav>
    </header>

    <main>
        {% block content %}
        {% endblock %}
    </main>

    <footer>
        <div class="footer-content">
            <div class="footer-section">
                <h3>About Us</h3>
                <p>Discover and download beautiful wall art for your space. Instant digital delivery.</p>
            </div>
            <div class="footer-section">
                <h3>Quick Links</h3>
                <ul>
                    <li><a href="{% url 'product_list' %}">Shop</a></li>
                    <li><a href="#">About</a></li>
                    <li><a href="#">Contact</a></li>
                    <li><a href="#">Shipping</a></li>
                </ul>
            </div>
            <div class="footer-section">
                <h3>Newsletter</h3>
                <p>Subscribe for updates and exclusive offers.</p>
                <form class="newsletter-form" method="POST" action="{% url 'newsletter_signup' %}">
                    {% csrf_token %}
                    <input type="email" name="email" placeholder="Your email" required>
                    <button type="submit">Subscribe</button>
                </form>
            </div>
        </div>
        <div class="footer-bottom">
            <p>&copy; 2024 Pixel and Paper. All rights reserved.</p>
        </div>
    </footer>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="https://js.stripe.com/v3/"></script>
    {% block extra_js %}{% endblock %}
</body>
</html>


=== ./templates/cart/cart.html ===
{% extends 'base.html' %}

{% block content %}
<div class="cart-page">
    <h1>Shopping Cart</h1>
    
    {% if cart_items %}
        <div class="cart-items">
            {% for item in cart_items %}
            <div class="cart-item" id="cart-item-{{ item.id }}">
                <div class="item-image">
                    {% if item.product.image %}
                        <img src="{{ item.product.image.url }}" alt="{{ item.product.title }}">
                    {% endif %}
                </div>
                <div class="item-details">
                    <h3>{{ item.product.title }}</h3>
                    <p class="price">¬£{{ item.product.price }}</p>
                </div>
                <div class="item-quantity">
                    <form class="update-quantity-form" data-item-id="{{ item.id }}">
                        {% csrf_token %}
                        <input type="number" name="quantity" value="{{ item.quantity }}" min="1" max="99">
                        <button type="submit" class="update-btn">Update</button>
                    </form>
                </div>
                <div class="item-subtotal">
                    ¬£<span class="subtotal">{{ item.get_subtotal }}</span>
                </div>
                <div class="item-remove">
                    <form method="POST" action="{% url 'remove_from_cart' item.id %}" class="remove-form">
                        {% csrf_token %}
                        <button type="submit" class="remove-btn">Remove</button>
                    </form>
                </div>
            </div>
            {% endfor %}
        </div>
        
        <div class="cart-summary">
            <div class="subtotal">
                <span>Subtotal:</span>
                <span>¬£<span id="cart-subtotal">{{ total }}</span></span>
            </div>
            <div class="shipping">
                <span>Shipping:</span>
                <span>Calculated at checkout</span>
            </div>
            <div class="total">
                <span>Total:</span>
                <span>¬£<span id="cart-total">{{ total }}</span></span>
            </div>
            <button id="checkout-button" class="checkout-btn">Proceed to Checkout</button>
        </div>
    {% else %}
        <div class="empty-cart">
            <p>Your cart is empty</p>
            <a href="{% url 'product_list' %}" class="continue-shopping">Continue Shopping</a>
        </div>
    {% endif %}
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Stripe initialization
    const stripe = Stripe('{{ stripe_public_key }}');
    
    // Update quantity handlers
    document.querySelectorAll('.update-quantity-form').forEach(form => {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            const itemId = this.dataset.itemId;
            const formData = new FormData(this);
            
            fetch(`/cart/update/${itemId}/`, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-CSRFToken': formData.get('csrfmiddlewaretoken')
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.error) {
                    throw new Error(data.error);
                }
                
                // Update item subtotal
                const itemElement = document.querySelector(`#cart-item-${itemId}`);
                itemElement.querySelector('.subtotal').textContent = data.subtotal.toFixed(2);
                
                // Update cart totals
                document.getElementById('cart-subtotal').textContent = data.cart_total.toFixed(2);
                document.getElementById('cart-total').textContent = data.cart_total.toFixed(2);
                
                // Update cart count in navigation
                const cartLink = document.querySelector('.nav-right a:last-child');
                cartLink.textContent = `Cart (${data.item_count})`;
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error updating cart: ' + error.message);
            });
        });
    });
    
    // Checkout handler
    const checkoutButton = document.getElementById('checkout-button');
    if (checkoutButton) {
        checkoutButton.addEventListener('click', function(e) {
            e.preventDefault();
            this.disabled = true;
            this.textContent = 'Processing...';
            
            fetch('/checkout/create-checkout-session/', {
                method: 'POST',
                headers: {
                    'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
                    'Content-Type': 'application/json'
                },
                credentials: 'same-origin'
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(session => {
                if (session.error) {
                    throw new Error(session.error);
                }
                return stripe.redirectToCheckout({ sessionId: session.sessionId });
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Checkout error: ' + error.message);
                this.disabled = false;
                this.textContent = 'Proceed to Checkout';
            });
        });
    }
    
    // Remove item handlers
    document.querySelectorAll('.remove-form').forEach(form => {
        form.addEventListener('submit', function(e) {
            if (!confirm('Are you sure you want to remove this item?')) {
                e.preventDefault();
            }
        });
    });
});
</script>
{% endblock %}


=== ./templates/checkout/cancel.html ===
{% extends 'base.html' %}

{% block content %}
<div class="cancel-page">
    <h1>Purchase Cancelled</h1>
    <p>Your order has been cancelled and you have not been charged.</p>
    <a href="{% url 'product_list' %}" class="button">Return to Shop</a>
</div>
{% endblock %}


=== ./templates/checkout/success.html ===
{% extends 'base.html' %}

{% block content %}
<div class="success-page">
    <h1>Thank you for your purchase!</h1>
    <p>Your order has been successfully processed.</p>
    
    <div class="download-section">
        <h2>Your Downloads</h2>
        <p>Your files are ready to download. Links will expire in 24 hours.</p>
        <a href="{{ product.downloadable_file.url }}" class="download-button">Download Now</a>
    </div>
    
    <a href="{% url 'product_list' %}" class="button">Continue Shopping</a>
</div>
{% endblock %}


=== ./templates/products/home.html ===
{% extends 'base.html' %}

{% block content %}
<div class="hero-section">
    <div class="hero-content">
        <h1>Beautiful Digital Wall Art</h1>
        <p>Instant downloads for your space</p>
        <a href="{% url 'product_list' %}" class="cta-button">Shop Now</a>
    </div>
</div>

<section class="featured-categories">
    <h2>Shop Categories</h2>
    <div class="category-grid">
        <div class="category-card">
            <img src="https://images.unsplash.com/photo-1541701494587-cb58502866ab?w=600" alt="Abstract Art">
            <h3>Abstract Art</h3>
            <a href="#" class="category-link">Shop Abstract</a>
        </div>
        <div class="category-card">
            <img src="https://images.unsplash.com/photo-1561070791-2526d30994b5?w=600" alt="Typography">
            <h3>Typography</h3>
            <a href="#" class="category-link">Shop Typography</a>
        </div>
        <div class="category-card">
            <img src="https://images.unsplash.com/photo-1511884642898-4c92249e20b6?w=600" alt="Nature & Landscapes">
            <h3>Nature & Landscapes</h3>
            <a href="#" class="category-link">Shop Landscapes</a>
        </div>
    </div>
</section>

<section class="about-section">
    <div class="about-content">
        <h2>About Our Digital Art</h2>
        <p>Transform your space with our curated collection of downloadable wall art. Each piece is carefully designed in high resolution for immediate download and printing.</p>
        <a href="#" class="about-link">Learn More</a>
    </div>
</section>

<section class="featured-products">
    <h2>Featured Artwork</h2>
    <div class="product-grid">
        <div class="product-card">
            <img src="https://images.unsplash.com/photo-1499781350541-7783f6c6a0c8?w=600" alt="Abstract Art">
            <h3>Abstract Flow</h3>
            <p class="price">¬£24.99</p>
            <a href="#" class="product-link">View Details</a>
        </div>
        <div class="product-card">
            <img src="https://images.unsplash.com/photo-1518531933037-91b2f5f229cc?w=600" alt="Minimalist Nature">
            <h3>Mountain Lines</h3>
            <p class="price">¬£19.99</p>
            <a href="#" class="product-link">View Details</a>
        </div>
        <div class="product-card">
            <img src="https://images.unsplash.com/photo-1567095761054-7a02e69e5c43?w=600" alt="Typography Art">
            <h3>Modern Quote</h3>
            <p class="price">¬£14.99</p>
            <a href="#" class="product-link">View Details</a>
        </div>
    </div>
</section>
{% endblock %}


=== ./templates/products/product_detail.html ===
{% extends 'base.html' %}

{% block content %}
<div class="product-detail">
    <div class="product-images">
        {% if product.image %}
        <div class="main-image">
            <img src="{{ product.image.url }}" alt="{{ product.title }}">
        </div>
        {% endif %}
    </div>
    
    <div class="product-info">
        <h1>{{ product.title }}</h1>
        <p class="price">¬£{{ product.price }}</p>

        <div class="product-specs">
            <p><strong>Dimensions:</strong> {{ product.dimensions }}</p>
            <p><strong>File Format:</strong> {{ product.file_format }}</p>
            <p><strong>License:</strong> Personal Use Only</p>
            <p><strong>Delivery:</strong> Instant Digital Download</p>
        </div>
        
        <div class="product-description">
            {{ product.description|linebreaks }}
        </div>
        
        <form method="POST" action="{% url 'add_to_cart' product.id %}" class="product-actions">
            {% csrf_token %}
            <div class="quantity-selector">
                <label for="quantity">Quantity:</label>
                <select name="quantity" id="quantity">
                    {% for i in "12345"|make_list %}
                    <option value="{{ i }}">{{ i }}</option>
                    {% endfor %}
                </select>
            </div>
            <div class="button-group">
                <button type="submit" class="add-to-cart-button">Add to Cart</button>
                <button type="button" id="checkout-button" class="checkout-button">Buy Now</button>
            </div>
        </form>
        
        <div class="product-meta">
            <p class="category">Category: {{ product.category }}</p>
        </div>
    </div>
</div>

<script src="https://js.stripe.com/v3/"></script>
<script>
    var stripe = Stripe('{{ stripe_public_key }}');
    var checkoutButton = document.getElementById('checkout-button');
    var quantitySelect = document.getElementById('quantity');

    checkoutButton.addEventListener('click', function() {
        var quantity = quantitySelect.value;
        fetch('/checkout/create-checkout-session/{{ product.id }}/')
        .then(function(response) {
            return response.json();
        })
        .then(function(session) {
            return stripe.redirectToCheckout({ sessionId: session.sessionId });
        })
        .then(function(result) {
            if (result.error) {
                alert(result.error.message);
            }
        })
        .catch(function(error) {
            console.error('Error:', error);
        });
    });
</script>

{% if related_products %}
<section class="related-products">
    <h2>You May Also Like</h2>
    <div class="product-grid">
        {% for related in related_products %}
        <div class="product-card">
            {% if related.image %}
            <img src="{{ related.image.url }}" alt="{{ related.title }}">
            {% endif %}
            <h3>{{ related.title }}</h3>
            <p class="price">¬£{{ related.price }}</p>
            <a href="{% url 'product_detail' related.slug %}" class="product-link">View Details</a>
        </div>
        {% endfor %}
    </div>
</section>
{% endif %}
{% endblock %}


=== ./templates/products/product_list.html ===
{% extends 'base.html' %}

{% block content %}
<div class="shop-header">
    <h1>Shop Our Collection</h1>
    
    <div class="shop-filters">
        <div class="category-filter">
            <select onchange="window.location.href=this.value">
                <option value="{% url 'product_list' %}">All Categories</option>
                {% for category in categories %}
                <option value="{% url 'product_list' %}?category={{ category }}" 
                    {% if request.GET.category == category %}selected{% endif %}>
                    {{ category }}
                </option>
                {% endfor %}
            </select>
        </div>
        
        <form class="search-form" method="GET" action="{% url 'product_list' %}">
            <input type="text" name="q" placeholder="Search products..." 
                   value="{{ request.GET.q }}">
            <button type="submit">Search</button>
        </form>
    </div>
</div>

<div class="product-grid">
    {% for product in products %}
    <div class="product-card">
        {% if product.image %}
        <img src="{{ product.image.url }}" alt="{{ product.title }}">
        {% endif %}
        <h3>{{ product.title }}</h3>
        <p class="price">¬£{{ product.price }}</p>
        <a href="{% url 'product_detail' product.slug %}" class="product-link">View Details</a>
    </div>
    {% empty %}
    <p class="no-products">No products found.</p>
    {% endfor %}
</div>
{% endblock %}


=== ./templates/products/views.py ===
# products/views.py
from django.shortcuts import render, get_object_or_404
from .models import Product

def home(request):
    """View for home page"""
    featured_products = Product.objects.all()[:3]  # Get first 3 products for featured section
    context = {
        'products': featured_products,
    }
    return render(request, 'products/home.html', context)

def product_list(request):
    """View for product list page"""
    products = Product.objects.all()
    
    # Handle search queries
    query = request.GET.get('q')
    if query:
        products = products.filter(title__icontains=query)
    
    # Handle category filtering
    category = request.GET.get('category')
    if category:
        products = products.filter(category=category)
    
    context = {
        'products': products,
        'categories': Product.objects.values_list('category', flat=True).distinct()
    }
    return render(request, 'products/product_list.html', context)

def product_detail(request, slug):
    """View for product detail page"""
    product = get_object_or_404(Product, slug=slug)
    related_products = Product.objects.filter(category=product.category).exclude(id=product.id)[:3]
    
    context = {
        'product': product,
        'related_products': related_products,
    }
    return render(request, 'products/product_detail.html', context)


=== ./templates/registration/login.html ===
{% extends 'base.html' %}

{% block content %}
<div class="auth-container">
    <h2>Login</h2>
    <form method="post" class="auth-form">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Login</button>
    </form>
    <p>Don't have an account? <a href="{% url 'register' %}">Register here</a></p>
</div>
{% endblock content %}


=== ./templates/registration/register.html ===
{% extends 'base.html' %}

{% block content %}
<div class="auth-container">
    <h2>Register</h2>
    <form method="post" class="auth-form">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Register</button>
    </form>
    <p>Already have an account? <a href="{% url 'login' %}">Login here</a></p>
</div>


=== ./utils/decorators.py ===
from functools import wraps
from django.shortcuts import redirect
from django.core.exceptions import PermissionDenied

def role_required(allowed_roles):
    def decorator(view_func):
        @wraps(view_func)
        def wrapped(request, *args, **kwargs):
            if not request.user.is_authenticated:
                return redirect('login')
            try:
                if request.user.profile.role in allowed_roles:
                    return view_func(request, *args, **kwargs)
            except:
                pass
            raise PermissionDenied
        return wrapped
    return decorator


=== ./env.py ===
import os

# Django Settings
os.environ['SECRET_KEY'] = 'django-insecure-!tmi(owsqedp=dkiza2&#v9)a@msi@mf$=#kwwzr!n)-qk43^c'
os.environ['DEVELOPMENT'] = 'True'
os.environ['DEBUG'] = 'True'

# Stripe Settings (add your keys when you have them)
os.environ['STRIPE_PUBLIC_KEY'] = 'pk_test_51QLS94LhuOfHzlKIXUapA7BeFCubZi2hPjbsMQFDPSgMDY1NEhjcZvin6eYnNTkTQu4F3p58GKlPl5fMzHDtKlrM00iK8g3E6B'
os.environ['STRIPE_SECRET_KEY'] = 'sk_test_51QLS94LhuOfHzlKINYjUWgXXVMB2bCcTEG6J3M7hQXiMIybYj1nDQ5AtSvqnZTMLyKvrJEB3PrRa1VTgIQT46Drs00CGURyTyv'
os.environ['STRIPE_WH_SECRET'] = 'whsec_1wIYyKoRhm9q30lFeZDKsQMYSiEq11Lz'

# AWS Settings (add your keys when you have them)
os.environ['AWS_STORAGE_BUCKET_NAME'] = 'pixelandpaper'
os.environ['AWS_ACCESS_KEY_ID'] = 'AKIAQSOI4THDZQST6UCY'
os.environ['AWS_SECRET_ACCESS_KEY'] = 'tBNsGoOCIoM/QCxQ7J7IAX5yHAQItK5C+I3iD1Hw'
os.environ['USE_AWS'] = 'True'

# Email Settings (add your credentials when ready)
os.environ['EMAIL_HOST_USER'] = ''
os.environ['EMAIL_HOST_PASSWORD'] = ''

os.environ['DATABASE_URL'] = 'postgresql://neondb_owner:tAqE0ub8YvDQ@ep-holy-butterfly-a2plzmej.eu-central-1.aws.neon.tech/chuck_groom_slot_596209'


